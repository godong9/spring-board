buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

task generateJavadoc(type: Javadoc) {
	options.addStringOption("locale","ko_KR")
	options.addStringOption("encoding","UTF-8")
	options.addStringOption("charset","UTF-8")
	options.addStringOption("docencoding","UTF-8")

	source = sourceSets.main.allJava
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-tomcat')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('mysql:mysql-connector-java')
	compile('org.springframework.session:spring-session-jdbc')
	compile('org.springframework:spring-context-support')

	compile('org.projectlombok:lombok')
	compile('com.google.guava:guava:21.0')
	compile('org.apache.commons:commons-lang3:3.5')
	compile('org.modelmapper.extensions:modelmapper-spring:0.7.5')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')

	compile('com.querydsl:querydsl-core')
	compile('com.querydsl:querydsl-jpa')
	compile('com.querydsl:querydsl-apt')

	compile('com.sun.mail:javax.mail')

	// jsoup HTML parser library @ http://jsoup.org/
	compile('org.jsoup:jsoup:1.10.2')

	compile('io.sentry:sentry-logback:1.3.0')

	testCompile('org.mockito:mockito-core')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}


sourceSets {
	generated {
		java {
			srcDirs = ['src/main/generated']
		}
	}
}

configurations {
	provided
}


task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.provided
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}

compileGeneratedJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

clean {
	delete sourceSets.generated.java.srcDirs
}